name: Rust

on: push

env:
  GITVERSION_VERSION: 5.3.6
  CARGO_TERM_COLOR: always
  DEBIAN_FRONTEND: noninteractive
  
jobs:
  setup:    
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      WARP_VERSION: ${{ steps.set-version.outputs.WARP_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0
        
      - id: set-version
        name: Setup GitVersion and set build version
        shell: pwsh
        run: |
          dotnet tool update GitVersion.Tool --global --version ${{ env.GITVERSION_VERSION }}
          $CARGO_PKG_VERSION = (dotnet gitversion /showVariable SemVer) | Out-String
          echo "::set-env name=CARGO_PKG_VERSION::$CARGO_PKG_VERSION"
          echo "::set-output name=CARGO_PKG_VERSION::$CARGO_PKG_VERSION":
 
  build-linux:
    runs-on: ubuntu-latest
    name: Build ${{ matrix.target }}
    needs: [setup]
    env:
      CARGO_PKG_VERSION: ${{ needs.setup.outputs.CARGO_PKG_VERSION }}
    strategy:
      matrix: 
        target: [x86_64-pc-windows-gnu, x86_64-unknown-linux-gnu]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Setup target
        run: rustup target add ${{ matrix.target }} --toolchain stable

      - name: Install mingw
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt-get update && \
          sudo apt-get install -y --no-install-recommends \
            mingw-w64 g++-mingw-w64-x86-64

      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ~/.cargo/registry/cache
          key: ${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.target }}-cargo-registry-
          
      - name: Build 
        run: |
         cd ${{ github.workspace }}/warp-runner
         cargo build --release --target ${{ matrix.target }}

      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: build-${{ matrix.target }}
          path: ${{ github.workspace }}/target/**/*

  build-osx:
    runs-on: macos-latest
    name: Build x86_64-apple-darwin
    needs: [setup]
    env:
      CARGO_PKG_VERSION: ${{ needs.setup.outputs.CARGO_PKG_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Setup target
        run: rustup target add x86_64-apple-darwin --toolchain stable
        
      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ~/.cargo/registry/cache
          key: $x86_64-apple-darwin-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            x86_64-apple-darwin-cargo-registry-
          
      - name: Build 
        run: |
         cd ${{ github.workspace }}/warp-runner
         cargo build --release --target x86_64-apple-darwin

      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: build-x86_64-apple-darwin
          path: ${{ github.workspace }}/target/**/*
